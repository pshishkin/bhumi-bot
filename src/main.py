#!/usr/bin/env python
# pylint: disable=unused-argument, wrong-import-position
# This program is dedicated to the public domain under the CC0 license.

"""
First, a few callback functions are defined. Then, those functions are passed to
the Application and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.

Usage:
Example of a bot-user conversation using ConversationHandler.
Send /start to initiate the conversation.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""
import asyncio
import itertools
import logging
import random
from typing import Optional

from telegram import __version__ as TG_VER

import settings
from mongo import MongoConnection
from photo_controller import PhotoController, Photo
from user_controller import UserController

try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)  # type: ignore[assignment]

if __version_info__ < (20, 0, 0, "alpha", 1):
    raise RuntimeError(
        f"This example is not compatible with your current PTB version {TG_VER}. To view the "
        f"{TG_VER} version of this example, "
        f"visit https://docs.python-telegram-bot.org/en/v{TG_VER}/examples.html"
    )
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    PicklePersistence,
    filters,
    CallbackQueryHandler,
)

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.DEBUG
)
logging.getLogger('hpack').setLevel(logging.INFO)
logger = logging.getLogger(__name__)

AWAIT_NAME, AWAIT_SUBSCRIPTION_PREFERENCE, DEFAULT_STATE, AWAIT_PHOTO, AWAIT_MAPPING_COMMENT,\
    AWAIT_PERSON_ON_PHOTO_1, AWAIT_PERSON_ON_PHOTO_2 = range(7)

default_reply_keyboard = [
    ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ"],
    ["–ó–∞–º–∞–ø–∏—Ç—å —á—É–∂–æ–µ —Ñ–æ—Ç–æ"],
]
default_markup = ReplyKeyboardMarkup(default_reply_keyboard, one_time_keyboard=True)
user_controller = UserController()
photo_controller = PhotoController()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±—É–º–∏–±–æ—Ç. –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–ª–∞—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∏ –º–∞–ø–∏—Ç—å —á—É–∂–∏–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã " \
                 "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Ä–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç. –≠—Ç–æ –∏–º—è –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å " \
                 "—Ä—è–¥–æ–º —Å —Ç–≤–æ–∏–º —Ñ–æ—Ç–æ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞–ø–ø–∏–Ω–≥–∞. "
    # await update.message.reply_text(reply_text, reply_markup=markup)
    markup = ReplyKeyboardRemove()
    await update.message.reply_text(reply_text, reply_markup=markup)

    return AWAIT_NAME


async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text
    await user_controller.update_name(update.message.from_user.id, name)

    reply_text = "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {}, –±—É–¥—É—â–∏–π –±—É–¥–¥–∞. –¢—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö " \
                 "–Ω–∞ –º–∞–ø–ø–∏–Ω–≥? ".format(name)

    reply_keyboard = [
        ["–î–∞", "–ù–µ—Ç"],
    ]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)

    await update.message.reply_text(reply_text, reply_markup=markup)

    return AWAIT_SUBSCRIPTION_PREFERENCE


async def receive_notification_preference(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["notification_preference"] = update.message.text

    text = update.message.text.lower()
    if text == '–¥–∞':
        await user_controller.update_mapping_request_subscription(update.message.from_user.id, True)
    else:
        await user_controller.update_mapping_request_subscription(update.message.from_user.id, False)

    reply_text = "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –º–∞–ø–∏—Ç—å —á—É–∂–∏–µ. " \
                 "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ. "

    await update.message.reply_text(reply_text, reply_markup=default_markup)

    return DEFAULT_STATE


async def default_state(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_text = "–¢—ã –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∏–ª–∏ –∑–∞–º–∞–ø–∏—Ç—å —á—É–∂–∏–µ. " \
                 "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ."

    await update.message.reply_text(reply_text, reply_markup=default_markup)
    return DEFAULT_STATE


async def ask_for_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_text = "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ ü§å"
    await update.message.reply_text(reply_text)
    return AWAIT_PHOTO


async def map_new_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_text = "–ù–æ–≤—ã—Ö —Ñ–æ—Ç–æ –µ—â–µ –Ω–µ—Ç"
    await update.message.reply_text(reply_text, reply_markup=default_markup)
    return DEFAULT_STATE


async def send_train_photo(update: Update, context: ContextTypes.DEFAULT_TYPE, photo: Photo) -> None:
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(str(bhumi), callback_data=f"trainmap_{photo.id}_{bhumi}") for bhumi in ['N/A', '0', '1', '2', '3']],
        [InlineKeyboardButton(str(bhumi), callback_data=f"trainmap_{photo.id}_{bhumi}") for bhumi in range(4, 9)],
        [InlineKeyboardButton(str(bhumi), callback_data=f"trainmap_{photo.id}_{bhumi}") for bhumi in range(9, 14)],
    ])
    await update.message.reply_photo(photo=photo.photo_id, caption='–ö–∞–∫ –æ—Ü–µ–Ω–∏—à—å?', reply_markup=markup)


async def receive_train_photo_mapping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    data = query.data.split('_')
    photo_id = data[1]
    bhumi = data[2]

    photo = await photo_controller.get_photo_by_id(photo_id)
    answers = ""
    for mapping in photo.mappings:
        user_name = (await user_controller.get_user(mapping.mapper_id)).name
        mapping_comment = ""
        if mapping.comment:
            mapping_comment = f" ({mapping.comment})"
        answers += f"{user_name}: {mapping.result}{mapping_comment}\n"

    # await query.answer()
    markup = InlineKeyboardMarkup([])

    await query.edit_message_caption(
        caption=f"–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª {bhumi} –±—É–º–∏. –ê –≤–æ—Ç –æ—Ç–≤–µ—Ç—ã –¥—Ä—É–≥–∏—Ö:\n{answers}",
        reply_markup=markup,
    )
    return DEFAULT_STATE


def get_photo_collective_mapping(photo: Photo) -> Optional[str]:
    for mapping in photo.mappings:
        if mapping.mapper_id == settings.TRAIN_USER_ID:
            return mapping.result
    return None


async def train01(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_text = "–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è. –¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ —Ç—ã —É–≤–∏–¥–∏—à—å —á—É–∂–∏–µ. –í–æ—Ç –¥–≤–∞ —Ñ–æ—Ç–æ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞." \
                 "–û–¥–Ω–æ —Ñ–æ—Ç–æ 0 –±—É–º–∏, –¥—Ä—É–≥–æ–µ —Å–∫–æ–ª—å–∫–æ-—Ç–æ."
    await update.message.reply_text(reply_text)
    photos = await photo_controller.get_photos_for_train()
    groups = []
    for key, group in itertools.groupby(photos, lambda x: "{}-{}".format(x.user_id, x.name)):
        groups.append(list(group))

    random.shuffle(groups)
    for group in groups:
        group = list(group)
        photos0 = [photo for photo in group if get_photo_collective_mapping(photo) == '0']
        photosA = [photo for photo in group if get_photo_collective_mapping(photo) == '1']
        if not photos0 or not photosA:
            continue
        photo0 = random.choice(photos0)
        photoA = random.choice(photosA)
        if random.random() > 0.5:
            await send_train_photo(update, context, photo0)
            await send_train_photo(update, context, photoA)
        else:
            await send_train_photo(update, context, photoA)
            await send_train_photo(update, context, photo0)

        return DEFAULT_STATE
    reply_text = "–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ."
    await update.message.reply_text(reply_text)
    return DEFAULT_STATE


async def train12(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_text = "–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è. –¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ —Ç—ã —É–≤–∏–¥–∏—à—å —á—É–∂–∏–µ. –í–æ—Ç –¥–≤–∞ —Ñ–æ—Ç–æ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞." \
                 "–û–¥–Ω–æ —Ñ–æ—Ç–æ 0 –±—É–º–∏, –¥—Ä—É–≥–æ–µ —Å–∫–æ–ª—å–∫–æ-—Ç–æ."
    await update.message.reply_text(reply_text)
    photos = await photo_controller.get_photos_for_train()
    groups = []
    for key, group in itertools.groupby(photos, lambda x: "{}-{}".format(x.user_id, x.name)):
        groups.append(list(group))

    random.shuffle(groups)
    for group in groups:
        group = list(group)
        photos0 = [photo for photo in group if get_photo_collective_mapping(photo) == '1']
        photosA = [photo for photo in group if get_photo_collective_mapping(photo) == '2']
        if not photos0 or not photosA:
            continue
        photo0 = random.choice(photos0)
        photoA = random.choice(photosA)
        if random.random() > 0.5:
            await send_train_photo(update, context, photo0)
            await send_train_photo(update, context, photoA)
        else:
            await send_train_photo(update, context, photoA)
            await send_train_photo(update, context, photo0)

        return DEFAULT_STATE
    reply_text = "–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ."
    await update.message.reply_text(reply_text)
    return DEFAULT_STATE


async def train23(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_text = "–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è. –¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ —Ç—ã —É–≤–∏–¥–∏—à—å —á—É–∂–∏–µ. –í–æ—Ç –¥–≤–∞ —Ñ–æ—Ç–æ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞." \
                 "–û–¥–Ω–æ —Ñ–æ—Ç–æ 0 –±—É–º–∏, –¥—Ä—É–≥–æ–µ —Å–∫–æ–ª—å–∫–æ-—Ç–æ."
    await update.message.reply_text(reply_text)
    photos = await photo_controller.get_photos_for_train()
    groups = []
    for key, group in itertools.groupby(photos, lambda x: "{}-{}".format(x.user_id, x.name)):
        groups.append(list(group))

    random.shuffle(groups)
    for group in groups:
        group = list(group)
        photos0 = [photo for photo in group if get_photo_collective_mapping(photo) == '2']
        photosA = [photo for photo in group if get_photo_collective_mapping(photo) == '3']
        if not photos0 or not photosA:
            continue
        photo0 = random.choice(photos0)
        photoA = random.choice(photosA)
        if random.random() > 0.5:
            await send_train_photo(update, context, photo0)
            await send_train_photo(update, context, photoA)
        else:
            await send_train_photo(update, context, photoA)
            await send_train_photo(update, context, photo0)

        return DEFAULT_STATE
    reply_text = "–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ."
    await update.message.reply_text(reply_text)
    return DEFAULT_STATE


async def train0a(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_text = "–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è. –¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ —Ç—ã —É–≤–∏–¥–∏—à—å —á—É–∂–∏–µ. –í–æ—Ç –¥–≤–∞ —Ñ–æ—Ç–æ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."
    await update.message.reply_text(reply_text)
    photos = await photo_controller.get_photos_for_train()
    for key, group in itertools.groupby(photos, lambda x: "{}-{}".format(x.user_id, x.name)):
        group = list(group)
        if len(group) < 2:
            continue
        photos = random.choices(group, k=2)
        await send_train_photo(update, context, photos[0])
        await send_train_photo(update, context, photos[1])
        return DEFAULT_STATE
    reply_text = "–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ."
    await update.message.reply_text(reply_text)
    return DEFAULT_STATE


async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["last_photo_id"] = update.message.photo[-1].file_id
    reply_text = "–≠—Ç–æ —Ç—ã –∏–ª–∏ –¥—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫?"
    reply_keyboard = [
        ["–Ø", "–î—Ä—É–≥–æ–π"],
    ]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    await update.message.reply_text(reply_text, reply_markup=markup)
    return AWAIT_PERSON_ON_PHOTO_1


async def receive_photo_other(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # markup = ReplyKeyboardMarkup([], one_time_keyboard=True)
    reply_text = "–ö–∞–∫ –∑–æ–≤—É—Ç —á–µ–ª–æ–≤–µ–∫–∞? –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ —Ä—è–¥–æ–º —Å —Ñ–æ—Ç–æ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞–ø–ø–∏–Ω–≥–∞."
    await update.message.reply_text(reply_text)
    return AWAIT_PERSON_ON_PHOTO_2


async def receive_photo_other_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text
    return await handle_new_photo(update, context, context.user_data["last_photo_id"], name)


async def receive_photo_me(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await handle_new_photo(update, context, context.user_data["last_photo_id"], "")


async def handle_new_photo(update: Update, context: ContextTypes.DEFAULT_TYPE, photo_id: str, name: str) -> int:
    object_id = await photo_controller.add_photo(update.message.from_user.id, photo_id, name)
    reply_text = "–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –∂–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–ø–ø–∏–Ω–≥–∞," \
                 " —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥."

    await update.message.reply_text(reply_text, reply_markup=default_markup)

    subscribers = await user_controller.get_users_subscribed_to_mapping_requests()

    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(str(bhumi), callback_data=f"map_{object_id}_{bhumi}") for bhumi in ['N/A', '0', '1', '2', '3']],
        [InlineKeyboardButton(str(bhumi), callback_data=f"map_{object_id}_{bhumi}") for bhumi in range(4, 9)],
        [InlineKeyboardButton(str(bhumi), callback_data=f"map_{object_id}_{bhumi}") for bhumi in range(9, 14)],
    ])

    user = await user_controller.get_user(update.message.from_user.id)

    person_on_photo_suffix = ""
    if name:
        person_on_photo_suffix = f" ({name})"
    caption = "–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –æ—Ç {}{}!".format(user.name, person_on_photo_suffix)
    for chat_id in subscribers:
        await context.bot.send_photo(chat_id=chat_id,
                                     photo=photo_id,
                                     caption=caption,
                                     reply_markup=markup)

    return DEFAULT_STATE


async def receive_mapping_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data.split('_')
    photo_id = data[1]
    bhumi = data[2]

    context.user_data["last_mapped_photo"] = photo_id
    context.user_data["last_mapped_result"] = bhumi

    # await query.answer()
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton('–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)', callback_data=f"mapcomment_yes")],
        [InlineKeyboardButton('–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data=f"mapcomment_no")],
    ])

    await query.edit_message_caption(
        caption=f"–§–æ—Ç–æ –∑–∞–º–∞–ø–ª–µ–Ω–æ –Ω–∞ {bhumi} –±—É–º–∏. –ß—Ç–æ –Ω–∞—Å—á–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è?",
        reply_markup=markup,
    )
    return DEFAULT_STATE


async def handle_new_mapping(update: Update, context: ContextTypes.DEFAULT_TYPE, mapper_id: int,  photo_id: str, bhumi: str, comment: Optional[str]):
    mapper = await user_controller.get_user(mapper_id)
    owner = await photo_controller.get_photo_sender(photo_id)
    await photo_controller.update_mapping_result(photo_id, mapper_id, bhumi, comment)

    await context.bot.send_message(chat_id=mapper_id, text="–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —É–¥–∞—á–∏!", reply_markup=default_markup)
    text = f"{mapper.name} –æ—Ç–º–∞–ø–∏–ª —Ç–≤–æ–µ —Ñ–æ—Ç–æ.\n–ë—É–º–∏: {bhumi}."
    if comment:
        text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    await context.bot.send_message(chat_id=owner, text=text)
    return DEFAULT_STATE


async def skip_mapping_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_reply_markup(None)
    return await handle_new_mapping(
        update,
        context,
        update.callback_query.from_user.id,
        context.user_data["last_mapped_photo"],
        context.user_data["last_mapped_result"],
        None
    )


async def ask_mapping_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_reply_markup(None)
    await context.bot.send_message(
        chat_id=update.callback_query.from_user.id,
        text="–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä, —á—É–≤—Å—Ç–≤—É—é –ø—É—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –≤ –º–∞—Ç–∫–µ.",
        reply_markup=None
    )
    return AWAIT_MAPPING_COMMENT


async def receive_mapping_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await handle_new_mapping(
        update,
        context,
        update.message.from_user.id,
        context.user_data["last_mapped_photo"],
        context.user_data["last_mapped_result"],
        update.message.text
    )


async def init():
    MongoConnection.initialize()
    await UserController.initialize()
    await PhotoController.initialize()


def main() -> None:
    """Run the bot."""
    # Create the Application and pass it your bot's token.
    persistence = PicklePersistence(filepath="conversationbot")
    application = Application.builder().token(settings.TELEGRAM_TOKEN).persistence(persistence).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.TEXT, start),
        ],
        states={
            AWAIT_NAME: [MessageHandler(filters.TEXT, receive_name)],
            AWAIT_SUBSCRIPTION_PREFERENCE: [
                MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç)$"), receive_notification_preference)
            ],
            DEFAULT_STATE: [
                CommandHandler("start", start),
                MessageHandler(filters.Text(["–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ"]), ask_for_photo),
                MessageHandler(filters.Text(["–ó–∞–º–∞–ø–∏—Ç—å —á—É–∂–æ–µ —Ñ–æ—Ç–æ"]), map_new_photo),
                MessageHandler(filters.TEXT, default_state),
            ],
            AWAIT_PHOTO: [
                MessageHandler(filters.PHOTO, receive_photo),
                MessageHandler(filters.TEXT, default_state),
            ],
            AWAIT_PERSON_ON_PHOTO_1: [
                MessageHandler(filters.Text(["–Ø"]), receive_photo_me),
                MessageHandler(filters.Text(["–î—Ä—É–≥–æ–π"]), receive_photo_other),
            ],
            AWAIT_PERSON_ON_PHOTO_2: [
                MessageHandler(filters.TEXT, receive_photo_other_name),
            ],
            AWAIT_MAPPING_COMMENT: [
                MessageHandler(filters.TEXT, receive_mapping_comment),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(receive_mapping_result, pattern=r"^map_.*$"),
            CallbackQueryHandler(receive_train_photo_mapping, pattern=r"^trainmap_.*$"),
            CallbackQueryHandler(skip_mapping_comment, pattern=r"^mapcomment_no$"),
            CallbackQueryHandler(ask_mapping_comment, pattern=r"^mapcomment_yes$"),
            application.add_handler(CommandHandler("train01", train01)),
            application.add_handler(CommandHandler("train12", train12)),
            application.add_handler(CommandHandler("train23", train23)),
            application.add_handler(CommandHandler("train0a", train0a)),
            MessageHandler(filters.ALL, default_state)
        ],
        name="my_conversation",
        persistent=True,
    )

    application.add_handler(conv_handler)

    # show_data_handler = CommandHandler("show_data", show_data)
    # application.add_handler(show_data_handler)

    # Run the bot until the user presses Ctrl-C
    application.run_polling()


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init())
    main()
